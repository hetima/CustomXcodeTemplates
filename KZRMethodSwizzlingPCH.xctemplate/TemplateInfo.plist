<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Kind</key>
	<string>Xcode.Xcode3.ProjectTemplateUnitKind</string>
	<key>Identifier</key>
	<string>com.hetima.KZRMethodSwizzlingPCH</string>
	<key>Options</key>
	<array>
		<dict>
			<key>Identifier</key>
			<string>com_hetima_KZRMethodSwizzlingPCH_use</string>
			<key>Name</key>
			<string>Use KZRMethodSwizzling</string>
			<key>Description</key>
			<string>define KZRMETHOD_SWIZZLING_WITHBLOCK macro in pch</string>
			<key>Type</key>
			<string>checkbox</string>
			<key>Default</key>
			<string>false</string>
			<key>Units</key>
			<dict>
				<key>true</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>*:*:defineKZRMethodSwizzling</key>
							<string>#import &lt;objc/message.h&gt;

#define KZRIMPUNION

typedef union KZRIMPUnion {
    IMP as_id;
    void (*as_void)(id, SEL, ...);
    void* (*as_pointer)(id, SEL, ...);
    
    char (*as_char)(id, SEL, ...);
    int (*as_int)(id, SEL, ...);
    long long (*as_long_long)(id, SEL, ...);
    double (*as_double)(id, SEL, ...);
    
    CGFloat (*as_float)(id, SEL, ...);
    CGRect (*as_rect)(id, SEL, ...);
    CGSize (*as_size)(id, SEL, ...);
    CGPoint (*as_point)(id, SEL, ...);
    NSRange (*as_range)(id, SEL, ...);
} KZRIMPUnion;

#define KZRClassMethod YES
#define KZRInstanceMethod NO


/*
 
KZRMETHOD_SWIZZLING_WITHBLOCK(
    const char* className, //Class name
    const char* selectorName,  //SEL name
    BOOL isClassMethod, //method type class(YES or KZRClassMethod) or instance(NO or KZRInstanceMethod)
    KZRIMPUnion originalIMP, // variable name of original IMP (will be declared by #define macro)
    SEL originalSelector, //variable name of SEL (will be declared by #define macro)
    ^ (id rself, ...){  // SEL is not brought (id self, arg1, arg2...)
        //swizzling code
    }
);
 
 */

#define KZRMETHOD_SWIZZLING_WITHBLOCK(className, selectorName, isClassMethod, originalIMP, originalSelector, block) {\
BOOL _val_isClassMethod=isClassMethod; \
const char* _val_selName=selectorName; \
if(*_val_selName=='+'){_val_isClassMethod=YES; _val_selName++;} \
Class _val_cls=objc_getClass(className); \
SEL originalSelector=sel_registerName(_val_selName); \
Method _val_originalMethod; \
if (_val_isClassMethod)_val_originalMethod = class_getClassMethod(_val_cls, originalSelector); \
else _val_originalMethod = class_getInstanceMethod(_val_cls, originalSelector); \
KZRIMPUnion originalIMP = (KZRIMPUnion)(IMP)method_getImplementation(_val_originalMethod); \
if (originalIMP.as_id) { id _val_block=block \
;IMP _val_newImp = imp_implementationWithBlock(_val_block); \
method_setImplementation(_val_originalMethod, _val_newImp); \
} \
}

</string>
						</dict>
					</dict>
				</array>
				<key>false</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>*:*:defineKZRMethodSwizzling</key>
							<string></string>
						</dict>
					</dict>
				</array>
			</dict>
		</dict>
	</array>
</dict>
</plist>
